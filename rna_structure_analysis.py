# %%

def rnafold_dp_parse(file_path):
    '''
    Takes a dotplot PostScript file generated by RNAfold and parses the roots 
    of base parsing probabilities into a dictionary with coordinates i and j 
    for the interactions as keys.

    Parameters:
        file_path (str): File path to a dotplot PostScript file generated by 
        RNAfold

    Returns:
        dict: A dictionary with the format {(i, j) : p} where i and p are 
        nucleotide coordinates and p is the pairing probability of the 
        interaction.
    '''
    ps_file = open(file_path, "r")
    probability_dictionary = {}
    for line in ps_file:
        line = line.strip()
        if line.endswith("ubox") and not line.startswith("%"):
            i = int(line.split(" ")[0])
            j = int(line.split(" ")[1])
            p = pow(float(line.split(" ")[2]),2)
            probability_dictionary[(i, j)] = p
    ps_file.close()
    return(probability_dictionary)

# %%

def p_distances_squared(rna_len, pairing_rna1, pairing_rna2):
    '''
    Takes two dictionaries, ti and pairing_rna2, and the length 
    of the originating RNA sequence, rna_len, and returns a dictionarry with 
    coordinates i and j as keys and the squared between each coordinate. 

    Preconditions:
        Both dictionaries, ti and pairing_rna2, should have 
        coordinates i and j as keys and pairing probabilities as values.
        The RNA sequences originating the base pairing probabilities must have 
        the same size.

    Parameters:
        file_path (str): File path to a dotplot PostScript file generated by 
        RNAfold

    Returns:
        dict: A dictionary with the format {(i, j) : pow(p1-p2)} where i and p 
        are nucleotide coordinates and p is the pairing probability of the 
        interaction.
    '''
    distance_dictionary = {}
    # Selects keys that are on both dictionaries:
    intersection_p = pairing_rna1.keys() & pairing_rna2.keys()
    # Selects keys that are only on the RNA01 dictionary:
    only_pairing_rna1 = pairing_rna1.keys() - pairing_rna2.keys()
    # Selects keys that are only on the RNA02 dictionary:
    only_pairing_rna2 = pairing_rna2.keys() - pairing_rna1.keys()
    for key in intersection_p:
        distance_dictionary[key] = pow(pairing_rna1[key] - 
                                       pairing_rna2[key], 2)
    for key in only_pairing_rna1:
        distance_dictionary[key] = pow(pairing_rna1[key], 2)
    for key in only_pairing_rna2:
        distance_dictionary[key] = pow(pairing_rna2[key], 2)
    return(distance_dictionary)

# %%

# Parse base pairing probabilites from PostScript files for two artificial
# RNA sequences.

rna01_pairing_p = rnafold_dp_parse('synthetic_seq_fold/structure01_dp.ps')
rna02_pairing_p = rnafold_dp_parse('synthetic_seq_fold/structure02_dp.ps')

# %%

# Compute the squared distance between base pairing probabilities for both 
# sequences.

distances_p_squared = p_distances_squared(66, rna01_pairing_p, rna02_pairing_p)

# %%

# Sum the distances of individual squared distances
sum(distances_p_squared.values())
