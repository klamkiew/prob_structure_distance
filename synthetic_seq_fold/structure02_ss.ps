%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.16
%%CreationDate: Wed Nov 11 11:36:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGCACGCUUCAGACCUAUUAGUUUUACGUAAUAUUCGGAACGAUCUAGCCGACGAAAAAACUCUU\
) } def
/len { sequence length } bind def

/coor [
[164.36613464 182.92478943]
[155.21148682 171.04234314]
[146.05682373 159.15991211]
[136.90217590 147.27746582]
[116.10784149 141.90330505]
[111.48077393 120.20167542]
[100.27107239 110.23460388]
[92.35227966 107.52950287]
[88.78363037 99.52798462]
[78.05342865 89.04644012]
[67.32322693 78.56490326]
[52.04472351 74.45661926]
[48.34689713 60.02833557]
[37.61669159 49.54679489]
[24.50917053 48.85794067]
[15.77275562 39.61268997]
[15.82392883 27.29828835]
[5.59681129 16.32531929]
[-4.63030577 5.35234928]
[-14.85742283 -5.62062073]
[-25.08454132 -16.59359169]
[-40.46949005 -14.57295227]
[-54.08776855 -22.01083183]
[-60.70287704 -36.04721451]
[-57.77116394 -51.28482056]
[-46.41993713 -61.86448288]
[-31.01397324 -63.71810532]
[-17.47718048 -56.13293076]
[-11.01473236 -42.02561569]
[-14.11157036 -26.82070732]
[-3.88445330 -15.84773827]
[6.34266424 -4.87476826]
[16.56978226 6.09820175]
[26.79689789 17.07117271]
[43.72124100 21.09963989]
[48.09823227 38.81658936]
[58.82843781 49.29813004]
[73.33943939 52.65670395]
[77.80476379 67.83469391]
[88.53496552 78.31623840]
[99.26517487 88.79778290]
[110.23814392 99.02489471]
[121.44784546 108.99196625]
[130.30473328 106.76150513]
[139.18722534 108.42431641]
[146.47984314 113.59574890]
[150.89080811 121.26064301]
[151.68055725 129.97177124]
[148.78460693 138.12281799]
[157.93927002 150.00524902]
[167.09391785 161.88769531]
[176.24856567 173.77012634]
[190.79782104 169.44767761]
[205.92573547 170.67680359]
[219.58638000 177.29129028]
[229.93225098 188.39656067]
[235.56417847 202.49073792]
[235.72047424 217.66769409]
[230.38000488 231.87487793]
[220.26502991 243.19087219]
[206.74351501 250.08528137]
[191.64411926 251.62570190]
[177.00894165 247.60379028]
[164.81723022 238.56350708]
[156.71784973 225.72744751]
[153.80616760 210.83158875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 52]
[2 51]
[3 50]
[4 49]
[6 43]
[7 42]
[9 41]
[10 40]
[11 39]
[13 37]
[14 36]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
